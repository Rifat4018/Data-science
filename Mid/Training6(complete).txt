pkgs <- c("tidyverse","janitor","fastDummies","GGally","ggcorrplot")
to_install <- setdiff(pkgs, rownames(installed.packages()))
if (length(to_install) > 0) install.packages(to_install, repos="https://cloud.r-project.org")
invisible(lapply(pkgs, library, character.only = TRUE))

pkgs <- c("dplyr", "ggplot2", "GGally", "corrplot", "scales")

to_install <- setdiff(pkgs, rownames(installed.packages()))
if (length(to_install) > 0) install.packages(to_install, repos="https://cloud.r-project.org")

invisible(lapply(pkgs, library, character.only = TRUE))

# Loading of Datasets
gender_submission <- read.csv("D:\\10 semister\\Data Science\\Project\\Titanic\\titanic\\gender_submission.csv")
train_data <- read.csv("D:\\10 semister\\Data Science\\Project\\Titanic\\titanic\\train.csv")
test_data <- read.csv("D:\\10 semister\\Data Science\\Project\\Titanic\\titanic\\test.csv")

# Insert Survived Column on Test Data
test_data <- cbind(Survived = gender_submission$Survived, test_data)

# Concat Train Data and Test Data
bind <- rbind(train_data, test_data)
write.csv(bind, "D:\\10 semister\\Data Science\\Project\\Titanic\\titanic\\titanic.csv", row.names = FALSE)
df

# Libraries
# library(dplyr)     # Data manipulation
# library(ggplot2)   # Plotting
# library(GGally)    # Pair plots
# library(corrplot)  # Correlation heatmap
# library(scales)    # Scaling transformations

# Ignore Warnings
options(warn = -1)

# -----------------------
# Data Loading
# -----------------------
df <- read.csv("D:\\10 semister\\Data Science\\Project\\Titanic\\titanic\\\\Complete Project\\titanic.csv")
df

# -----------------------
# Data Understanding
# -----------------------
head(df)
str(df)
summary(df)

# -----------------------
# Data Preparation
# -----------------------

# Remove duplicate rows
df <- df[!duplicated(df), ]
df

# Check missing values
Null_Counts <- colSums(is.na(df))
print(Null_Counts)

# Mean, median, and mode for Age
mean(df$Age, na.rm = TRUE)
median(df$Age, na.rm = TRUE)
freq_table <- table(df$Age)
names(freq_table)[which.max(freq_table)]

# Fill missing values
df$Age[is.na(df$Age)] <- 29.5
df$Fare[is.na(df$Fare)] <- median(df$Fare, na.rm = TRUE)
df$Embarked[is.na(df$Embarked)] <- "S"

# -----------------------
# Inconsistent Data Handling
# -----------------------
df$Sex <- tolower(df$Sex)
df$Embarked <- toupper(df$Embarked)
df$Embarked[df$Embarked %in% c("", "NA")] <- "S"

# -----------------------
# Feature Engineering
# -----------------------
# df$FamilySize <- df$SibSp + df$Parch + 1
# df$IsAlone <- ifelse(df$FamilySize == 1, 1, 0)
# df$Title <- sub(".*, (.*?)\\..*", "\\1", df$Name)
# df

# Standardize categories, then impute Embarked mode
df$Sex      <- tolower(df$Sex)
df$Embarked <- toupper(df$Embarked)
valid_emb   <- c("C","Q","S")
df$Embarked[!df$Embarked %in% valid_emb] <- NA
emb_mode <- names(sort(table(df$Embarked), decreasing = TRUE))[1]
df$Embarked[is.na(df$Embarked)] <- emb_mode
df
# -----------------------
# Drop unnecessary columns
# -----------------------
df <- df[, !(names(df) %in% c("PassengerId", "Name", "Ticket", "Cabin"))]
df

# =======================================================
# >>> ADDED: Outlier Handling (IQR Winsorization)
# =======================================================
winsor_iqr <- function(x) {
  q1 <- quantile(x, 0.25, na.rm=TRUE); q3 <- quantile(x, 0.75, na.rm=TRUE)
  iqr <- q3 - q1; low <- q1 - 1.5*iqr; high <- q3 + 1.5*iqr
  pmin(pmax(x, low), high)
}

df$Fare_w <- winsor_iqr(df$Fare)
df$Age_w  <- winsor_iqr(df$Age)

install.packages("gridExtra")
library(gridExtra)

# -----------------------
# Transformation & Scaling
# -----------------------
df$Fare_log <- log1p(df$Fare)  # log transformation for skewed data
df$Age_scaled <- scale(df$Age) # z-score scaling
df

# =======================================================
# >>> ADDED: Feature Engineering
# =======================================================
# NOTE: we dropped Name/Cabin/Ticket earlier, so re-read for Title/CabinAvailable if needed
df_feat <- read.csv("D:\\10 semister\\Data Science\\Project\\Titanic\\titanic\\\\Complete Project\\titanic.csv")
df$FamilySize     <- df_feat$SibSp + df_feat$Parch + 1
df$IsAlone        <- ifelse(df$FamilySize==1, 1, 0)
df$FarePerPerson  <- df_feat$Fare / pmax(df$FamilySize,1)
df$CabinAvailable <- ifelse(is.na(df_feat$Cabin) | df_feat$Cabin=="", 0, 1)

extract_title <- function(nm) {
  t <- stringr::str_extract(nm, "(?<=,\\s)([^.]+)(?=\\.)")
  t <- trimws(t)
  dplyr::case_when(
    t %in% c("Mlle","Ms") ~ "Miss",
    t %in% c("Mme") ~ "Mrs",
    t %in% c("Capt","Col","Major","Dr","Rev") ~ "Officer",
    t %in% c("Don","Sir","Jonkheer") ~ "Nobleman",
    t %in% c("Lady","Dona","the Countess") ~ "Noblewoman",
    TRUE ~ t
  )
}


df$Title <- extract_title(df_feat$Name)
df$AgeGroup <- cut(df$Age, breaks=c(-Inf,12,18,35,60,Inf),
                   labels=c("Child","Teen","YoungAdult","Adult","Senior"))



# =======================================================
# >>> ADDED: One-Hot Encoding & Scaling
# =======================================================
df_encoded <- df %>%
  mutate(
    Sex = factor(Sex),
    Embarked = factor(Embarked),
    Pclass = factor(Pclass),
    Survived = as.integer(Survived)
  ) %>%
  fastDummies::dummy_cols(
    select_columns = c("Sex","Embarked","Pclass","Title","AgeGroup"),
    remove_selected_columns = TRUE,
    remove_first_dummy = TRUE
  )

head(df_encoded)
setdiff(names(df_encoded), names(df))
df_encoded

# Scale selected numeric columns (z-score)
scale_cols <- c("Age","Fare","Fare_w","Age_w","FamilySize","FarePerPerson")
for (cn in scale_cols) {
  if (cn %in% names(df_encoded)) {
    df_encoded[[paste0(cn,"_z")]] <- as.numeric(scale(df_encoded[[cn]]))
  }
}
# View only the scaled columns
df_encoded %>% 
  select(ends_with("_z")) %>% 
  head()

# compare
data.frame(
  Raw_Age = df_encoded$Age,
  Scaled_Age = df_encoded$Age_z
) %>% head()

names(df_encoded)
df

# -----------------------
# Outlier Detection & Handling (Fare)
# -----------------------
# fare_qnt <- quantile(df$Fare, probs=c(.25, .75), na.rm = TRUE)
# fare_IQR <- fare_qnt[2] - fare_qnt[1]
# df <- df %>% filter(Fare > (fare_qnt[1] - 1.5*fare_IQR) &
#                       Fare < (fare_qnt[2] + 1.5*fare_IQR))
# df

# -----------------------
# Dataset Info
# -----------------------
str(df)
dim(df)  # rows & columns
View(df)

# -----------------------
# Nunique and Unique Values
# -----------------------
column_names <- names(df)
for (col_name in column_names) {
  cat(col_name, ":", length(unique(df[[col_name]])), "\n")
}

cols <- c("Pclass", "Embarked")
for (col in cols) {
  if (is.character(df[[col]])) {
    cat(col, ":", unique(df[[col]]), "\n")
  }
}

# -----------------------
# Exploratory Data Analysis
# -----------------------

# General Passenger Profile (Histogram)
hist(na.omit(df$Age), breaks = 8, col = "lightblue",
     main = "General Passenger Profile", xlab = "Age")

# Multiple histograms combined in a single PNG file
png(filename = "histograms.png", width = 800, height = 800)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))  # 2x2 layout, margins adjusted

hist(df$Pclass, breaks = 9, col = "lightblue", main = "Passenger Class", xlab = "Pclass")
hist(df$Survived, breaks = 9, col = "lightblue", main = "Survival Status", xlab = "Survived")
hist(df$Age, breaks = 9, col = "lightblue", main = "Age Distribution", xlab = "Age")
hist(df$SibSp, breaks = 9, col = "lightblue", main = "Siblings/Spouses Aboard", xlab = "SibSp")

dev.off()


# Pie charts
par(mfrow=c(1,4))
pie(table(df$Survived), main="Survival", labels=c("Died", "Survived"), col=c("red", "blue"))
pie(table(df$Pclass), main="Pclass", labels=c("1st", "2nd", "3rd"), col=c("yellow", "red", "blue"))
pie(table(df$Sex), main="Sex", labels=c("Male", "Female"), col=c("yellow", "red"))
pie(table(df$Embarked), main="Embarked", labels=c("Cherbourg", "Queenstown", "Southampton"), col=c("yellow", "red", "blue"))

# Percentage of Survivors according to Socio-Economic Class
pclass <- table(df$Pclass, df$Survived)
pclass_percentage <- round((pclass / sum(pclass)) * 100, 2)
print(pclass_percentage)

# Dataframe for survival by class
pclass <- as.data.frame(table(df$Pclass, df$Survived))
pclass$Percentage <- round(pclass$Freq * 100 / sum(pclass$Freq), 2)
colnames(pclass) <- c("Pclass", "Survived", "Count", "Percentage")

# Plot
ggplot(pclass, aes(x = factor(Pclass), y = Percentage, fill = factor(Survived))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percentage of Survivors by Socio-Economic Class",
       x = "Pclass",
       y = "Percentage") +
  scale_fill_manual(values = c("blue", "red")) +
  scale_x_discrete(labels = c("1st", "2nd", "3rd")) +
  theme_minimal()

# Percentage of Survivors according to Gender
gender <- table(df$Sex, df$Survived)
gender_percentage <- round((gender / sum(gender)) * 100, 2)
print(gender_percentage)

# Dataframe for survival by gender
gender <- as.data.frame(table(df$Sex, df$Survived))
gender$Percentage <- round(gender$Freq * 100 / sum(gender$Freq), 2)
colnames(gender) <- c("Sex", "Survived", "Count", "Percentage")

# Plot
ggplot(gender, aes(x = factor(Sex), y = Percentage, fill = factor(Survived))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percentage of Survivors by Gender",
       x = "Sex",
       y = "Percentage") +
  scale_fill_manual(values = c("blue", "red")) +
  scale_x_discrete(labels = c("Female", "Male")) +
  theme_minimal()

# Age & Survival Relationship
ggplot(df, aes(x = Age, fill = factor(Survived))) +
  geom_density(alpha = 0.5) +
  labs(title = "Age & Survival Relationship", x = "Age", y = "Density") +
  scale_fill_manual(values = c("blue", "green")) +
  theme_minimal()

# Survival with siblings/spouse
ggplot(df, aes(x = factor(SibSp), fill = factor(Survived))) +
  geom_bar(position = "fill", alpha = 0.7, stat = "count") +
  labs(title = "Probability of Survival of those with Sibling/Spouse", 
       x = "Sibling/Spouse", y = "Percentage") +
  scale_fill_manual(values = c("blue", "green")) +
  theme_minimal()

# Survival with parents/children
ggplot(df, aes(x = factor(Parch), fill = factor(Survived))) +
  geom_bar(position = "fill", alpha = 0.7, stat = "count") +
  labs(title = "Probability of Survival of those with Parents/Children", 
       x = "Parents/Children", y = "Percentage") +
  scale_fill_manual(values = c("blue", "green")) +
  theme_minimal()

# Fare & Survival Relationship
ggplot(df, aes(x = Fare, fill = factor(Survived))) +
  geom_density(alpha = 0.5) +
  labs(title = "Fare & Survival Relationship", x = "Fare", y = "Density") +
  scale_fill_manual(values = c("blue", "green")) +
  theme_minimal()

# Percentage of Survivors by Embarkation
embark <- table(df$Embarked, df$Survived)
embark_percentage <- round((embark / sum(embark)) * 100, 2)
print(embark_percentage)

# Boxplots before/after (Fare)
gridExtra::grid.arrange(
  ggplot(df, aes(x=factor(1), y=Fare))   + geom_boxplot() + labs(title="Fare (Raw)", x=NULL, y="Fare"),
  ggplot(df, aes(x=factor(1), y=Fare_w)) + geom_boxplot() + labs(title="Fare (Winsorized)", x=NULL, y="Fare"),
  nrow=1
)

# Boxplots before/after (Age)
gridExtra::grid.arrange(
  ggplot(df, aes(x=factor(1), y=Age))   + geom_boxplot() + labs(title="Age (Raw)", x=NULL, y="Age"),
  ggplot(df, aes(x=factor(1), y=Age_w)) + geom_boxplot() + labs(title="Age (Winsorized)", x=NULL, y="Age"),
  nrow=1
)

# Visuals using engineered features
ggplot(df, aes(x=factor(IsAlone), fill=factor(Survived))) +
  geom_bar(position="fill") + labs(title="Survival by IsAlone", x="IsAlone (1=yes)", y="Proportion")

ggplot(df, aes(x=Title, fill=factor(Survived))) +
  geom_bar(position="fill") + labs(title="Survival by Title", x="Title", y="Proportion") +
  theme(axis.text.x = element_text(angle=30, hjust=1))


# =======================================================
# >>> ADDED: Correlation Analysis + Heatmap + High-corr list
# =======================================================
num_only <- df_encoded %>% select(where(is.numeric))
num_only <- num_only[, sapply(num_only, function(x) !all(is.na(x)))]
corr_mat <- cor(num_only, use="pairwise.complete.obs")
ggcorrplot(corr_mat, lab=FALSE) + labs(title="Correlation Heatmap (Numeric Features)")


# Highly correlated features (|r| >= 0.8)
thr <- 0.8
cm <- abs(corr_mat)
cm[upper.tri(cm, diag=TRUE)] <- NA
high_corr_pairs <- which(cm >= thr, arr.ind = TRUE)
if (nrow(high_corr_pairs) > 0) {
  cat("\n=== Highly Correlated Pairs (|r| >= 0.8) ===\n")
  apply(high_corr_pairs, 1, function(idx) {
    cat(rownames(cm)[idx[1]], "<->", colnames(cm)[idx[2]],
        " | r = ", round(corr_mat[idx[1], idx[2]], 3), "\n", sep="")
  })
} else {
  cat("\nNo feature pairs with |r| >= 0.8\n")
}


# =======================================================
# >>> ADDED: Boxplots & Pair Plot (Multivariate EDA)
# =======================================================
# Boxplots of Age/Fare vs Survived
ggplot(df, aes(x=factor(Survived), y=Age)) + geom_boxplot() +
  labs(title="Age vs Survived", x="Survived", y="Age")
ggplot(df, aes(x=factor(Survived), y=Fare)) + geom_boxplot() +
  labs(title="Fare vs Survived", x="Survived", y="Fare")

# Pair plot (limit to a handful of columns to keep it readable)
pp_cols <- df_encoded %>% 
  select(Survived, Age, Fare, FamilySize, FarePerPerson, starts_with("Sex_"), starts_with("Embarked_")) %>%
  select(where(function(x) is.numeric(x) || is.integer(x)))
GGally::ggpairs(pp_cols, progress = FALSE)



# Sex vs Survived (Chi-square)
chisq.test(table(df$Sex, df$Survived))

# Pclass vs Survived (Chi-square)
chisq.test(table(df$Pclass, df$Survived))

# Age vs Survived (t-test; if non-normal, use wilcox.test)
t.test(Age ~ Survived, data = df)

# Fare vs Survived
t.test(Fare ~ Survived, data = df)



# Install if needed
if (!requireNamespace("broom", quietly=TRUE)) install.packages("broom")
library(broom)

# Example model with a few key features
glm1 <- glm(Survived ~ Sex + Pclass + Age + Fare + IsAlone + Title, 
            data = df, family = binomial())
tidy(glm1, exponentiate = TRUE, conf.int = TRUE)  # Odds Ratios with CI


# Create AgeGroup if not already made
df$AgeGroup <- cut(df$Age, breaks=c(-Inf,12,18,35,60,Inf),
                   labels=c("Child","Teen","YoungAdult","Adult","Senior"))

# Matrix data
surv_matrix <- df %>%
  group_by(AgeGroup, Pclass) %>%
  summarise(SurvivalRate = mean(Survived), Count = n(), .groups="drop")


#1️⃣ Survival Matrix by AgeGroup × Pclass
#This is a true “matrix view” — each cell shows the survival rate.
# Heatmap
ggplot(surv_matrix, aes(x = factor(Pclass), y = AgeGroup, fill = SurvivalRate)) +
  geom_tile(color="white") +
  geom_text(aes(label = scales::percent(SurvivalRate, accuracy = 1)),
            color="black", size=4) +
  scale_fill_gradient(low = "red", high = "green") +
  labs(title = "Survival Rate Matrix by Age Group & Class",
       x = "Passenger Class", y = "Age Group", fill = "Survival Rate") +
  theme_minimal()

#2️⃣ Add Gender for a 3D Matrix (Faceted)
#Instead of collapsing genders, you can facet by Sex to get two heatmaps side-by-side.
surv_matrix_sex <- df %>%
  group_by(Sex, AgeGroup, Pclass) %>%
  summarise(SurvivalRate = mean(Survived), Count = n(), .groups="drop")

ggplot(surv_matrix_sex, aes(x = factor(Pclass), y = AgeGroup, fill = SurvivalRate)) +
  geom_tile(color="white") +
  geom_text(aes(label = scales::percent(SurvivalRate, accuracy = 1)),
            color="black", size=3) +
  scale_fill_gradient(low = "red", high = "green") +
  facet_wrap(~Sex) +
  labs(title = "Survival Rate Matrix by Age Group, Class & Gender",
       x = "Passenger Class", y = "Age Group", fill = "Survival Rate") +
  theme_minimal()

#3️⃣ Show Passenger Counts in the Matrix
#You can encode count as text or shape size.

ggplot(surv_matrix, aes(x = factor(Pclass), y = AgeGroup, fill = SurvivalRate, size = Count)) +
  geom_point(shape=21, color="black") +
  scale_fill_gradient(low="red", high="green") +
  scale_size_continuous(range = c(3, 12)) +
  labs(title="Survival Rate & Passenger Count by Age Group & Class",
       x="Passenger Class", y="Age Group", fill="Survival Rate", size="Passenger Count") +
  theme_minimal()
